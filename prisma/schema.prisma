datasource db {
<<<<<<< HEAD
  provider = "postgresql"
  url      = env("DATABASE_URL")
=======
  provider          = "postgresql"
  url               = env("DATABASE_URL")
>>>>>>> 9d52956 (v1.1)
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
<<<<<<< HEAD
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
=======
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
>>>>>>> 9d52956 (v1.1)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
<<<<<<< HEAD
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt() @map("updated_at")
=======
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt() @map("updated_at")
>>>>>>> 9d52956 (v1.1)
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
<<<<<<< HEAD
=======

>>>>>>> 9d52956 (v1.1)
  @@map("sessions")
}

model User {
<<<<<<< HEAD
  id            String    @id @default(cuid())
  name          String? @unique
  email         String?   @unique
  emailVerified DateTime? 
  password String?
  image         String?
  token String?
  isVerified Boolean? @default(false)
  expirationTime DateTime? 
  accounts      Account[]
  sessions      Session[]
=======
  id             String    @id @default(cuid())
  name           String?   @unique
  email          String?   @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  token          String?
  isVerified     Boolean?  @default(false)
  expirationTime DateTime?
  accounts       Account[]
  sessions       Session[]
>>>>>>> 9d52956 (v1.1)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
<<<<<<< HEAD
}
=======
}

model Research {
  id       String  @id @default(cuid())
  plgId    String? @unique
  username String?
  email    String?
  result   String?
}
>>>>>>> 9d52956 (v1.1)
